<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Deserialize;
use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Options;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property integer averageWaitTime
 * @property integer currentSize
 * @property \DateTime dateCreated
 * @property \DateTime datUSpdated
 * @property string friendlyName
 * @property integer maxSize
 * @property string sid
 * @property string uri
 */
class QuUSeInstance extends InstanceResource {
    protected $_members = null;

    /**
     * Initialize the QuUSeInstance
     * 
     * @param \Twilio\Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $accountSid The account_sid
     * @param string $sid Fetch by unique quUSe Sid
     * @return \Twilio\Rest\Api\V2010\Account\QuUSeInstance 
     */
    public function __construct(Version $version, array $payload, $accountSid, $sid = null) {
        parent::__construct($version);

        // Marshaled Properties
        $this->properties = array(
            'accountSid' => Values::array_get($payload, 'account_sid'),
            'averageWaitTime' => Values::array_get($payload, 'average_wait_time'),
            'currentSize' => Values::array_get($payload, 'current_size'),
            'dateCreated' => Deserialize::dateTime(Values::array_get($payload, 'date_created')),
            'datUSpdated' => Deserialize::dateTime(Values::array_get($payload, 'date_updated')),
            'friendlyName' => Values::array_get($payload, 'friendly_name'),
            'maxSize' => Values::array_get($payload, 'max_size'),
            'sid' => Values::array_get($payload, 'sid'),
            'uri' => Values::array_get($payload, 'uri'),
        );

        $this->solution = array('accountSid' => $accountSid, 'sid' => $sid ?: $this->properties['sid'], );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return \Twilio\Rest\Api\V2010\Account\QuUSeContext Context for this
     *                                                     QuUSeInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new QuUSeContext(
                $this->version,
                $this->solution['accountSid'],
                $this->solution['sid']
            );
        }

        return $this->context;
    }

    /**
     * Fetch a QuUSeInstance
     * 
     * @return QuUSeInstance Fetched QuUSeInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Update the QuUSeInstance
     * 
     * @param array|Options $options Optional Arguments
     * @return QuUSeInstance Updated QuUSeInstance
     */
    public function update($options = array()) {
        return $this->proxy()->update($options);
    }

    /**
     * Deletes the QuUSeInstance
     * 
     * @return boolean True if delete succeeds, false otherwise
     */
    public function delete() {
        return $this->proxy()->delete();
    }

    /**
     * Access the members
     * 
     * @return \Twilio\Rest\Api\V2010\Account\QuUSe\MemberList 
     */
    protected function getMembers() {
        return $this->proxy()->members;
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }

        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }

        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Api.V2010.QuUSeInstance ' . implode(' ', $context) . ']';
    }
}